// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  roleId          Int               @default(1) @map("role_id")
  idEnableLesson  Int               @default(1) @map("id_enable_lesson")
  role            Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  session         Session?
  grammarProgress GrammarProgress[]
  settings        UserSettings?
  dictionary      Dictionary[]
  lexiconProgress LexiconProgress[]
  statistics      Statistics[]

  @@map("users")
}

model UserSettings {
  userId                         Int          @unique @map("user_id")
  user                           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  countRepeatWordForLearned      Int          @map("count_repeat_word_for_learned")
  countRepeatWordsSimultaneously Int          @map("count_learning_words_simultaneously")
  learningModeWords              LearningMode
  learningModeTasks              LearningMode

  @@map("users_settings")
}

model Lesson {
  id             Int    @id @default(autoincrement())
  name           String
  theory         String
  passingPercent Int    @map("passing_percent")
  tasks          Task[]

  @@map("lessons")
}

model Task {
  id              Int               @id @default(autoincrement())
  englishSentence String            @map("english_sentence")
  russianSentence String            @map("russian_sentence")
  lessonId        Int               @map("lesson_id")
  lesson          Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  grammarProgress GrammarProgress[]

  @@map("tasks")
}

model GrammarProgress {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId Int  @map("task_id")
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@map("grammar_progresses")
}

model Dictionary {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  creatorId        Int                @map("creator_id")
  user             User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  dictionaryToWord DictionaryToWord[]
  words            Word[]

  @@map("dictionaries")
}

model Word {
  id               Int                @id @default(autoincrement())
  englishSpelling  String             @map("english_spelling")
  transcription    String
  russianSpelling  String             @map("russian_spelling")
  description      String?
  lexiconProgress  LexiconProgress[]
  dictionaryToWord DictionaryToWord[]
  dictionaries     Dictionary[]

  @@unique([englishSpelling, russianSpelling])
  @@map("words")
}

model DictionaryToWord {
  id           Int        @id @default(autoincrement())
  dictionaryId Int
  wordId       Int
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id], onDelete: Cascade)
  word         Word       @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([dictionaryId, wordId])
  @@map("dictionary_to_word")
}

model LexiconProgress {
  id            Int     @id @default(autoincrement())
  progressCount Int     @map("progress_count")
  isLearned     Boolean @map("is_learned")
  userId        Int     @map("user_id")
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordId        Int     @map("word_id")
  word          Word    @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([userId, wordId])
  @@map("lexicon_progresses")
}

model Statistics {
  id         Int      @id @default(autoincrement())
  date       DateTime
  words      Int?
  tasks      Int?
  quizPoints Int?     @map("quiz_points")
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@map("statistics")
}

model Session {
  userId       Int    @unique @map("user_id")
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String @map("refresh_token")

  @@map("sessions")
}

model Role {
  id          Int          @id @default(autoincrement())
  title       String
  permissions Permission[]
  users       User[]

  @@map("roles")
}

model Permission {
  id         Int     @id @default(autoincrement())
  descriptor String
  context    String?
  method     Method
  roleId     Int     @map("role_id")
  role       Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("permissions")
}

enum Method {
  ALL
  GET
  POST
  DELETE
  PUT
  PATCH
}

enum LearningMode {
  TRANSLATE_FROM_ENGLISH
  TRANSLATE_FROM_RUSSIAN
  COMBINED
}
